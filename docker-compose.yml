# Docker Compose per Linear Genetic Programming
# Orchestrazione completa dell'ambiente di sviluppo

version: '3.8'

services:
  # Ambiente di sviluppo principale
  lgp-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: lgp-development
    volumes:
      - .:/workspace
      - lgp-cache:/workspace/.cache
      - lgp-pytest:/workspace/.pytest_cache
    environment:
      - LGP_DEV=1
      - PYTHONPATH=/workspace
      - NUMBA_CACHE_DIR=/workspace/.cache/numba
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8000:8000"  # HTTP server per documentazione
    working_dir: /workspace
    command: >
      bash -c "
        echo 'Starting LGP Development Environment...' &&
        echo 'Available commands:' &&
        echo '  make clean && make DEBUG=1  # Build debug version' &&
        echo '  make python                 # Build Python extension' &&
        echo '  ./test.sh                   # Run all tests' &&
        echo '  pytest tests/               # Run unit tests' &&
        echo '  jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root  # Start Jupyter' &&
        bash
      "
    profiles:
      - dev

  # Ambiente di testing automatizzato
  lgp-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: lgp-testing
    volumes:
      - ./test_results:/workspace/test_results
    environment:
      - CI=true
      - PYTEST_WORKERS=auto
    command: >
      bash -c "
        echo 'Running comprehensive test suite...' &&
        ./test.sh &&
        echo 'Tests completed. Results in /workspace/test_results/'
      "
    profiles:
      - test

  # Ambiente di produzione ottimizzato
  lgp-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lgp-production
    volumes:
      - ./datasets:/workspace/datasets:ro
      - ./results:/workspace/results
    environment:
      - LGP_PROD=1
      - OMP_NUM_THREADS=8
    command: python examples.py
    profiles:
      - prod


  # Jupyter Lab standalone per analisi interattiva
  lgp-jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: lgp-jupyter
    volumes:
      - .:/workspace
      - lgp-jupyter-data:/home/lgpdev/.jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    command: >
      bash -c "
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''
      "
    profiles:
      - jupyter

  # Servizio di documentazione
  lgp-docs:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: lgp-docs
    volumes:
      - .:/workspace
      - lgp-docs-build:/workspace/docs/_build
    ports:
      - "8000:8000"
    working_dir: /workspace
    command: >
      bash -c "
        echo 'Building documentation...' &&
        python -m http.server 8000 --directory .
      "
    profiles:
      - docs

  # Profiling e performance analysis
  lgp-profiler:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: lgp-profiler
    volumes:
      - .:/workspace
      - ./profiling:/workspace/profiling
    environment:
      - ENABLE_PROFILING=1
    privileged: true  # Needed for perf
    command: >
      bash -c "
        echo 'Performance profiling environment ready' &&
        echo 'Available tools:' &&
        echo '  perf record -g python examples.py' &&
        echo '  valgrind --tool=callgrind python examples.py' &&
        echo '  python -m cProfile -o profile.stats examples.py' &&
        bash
      "
    profiles:
      - profiling

volumes:
  lgp-cache:
    driver: local
  lgp-pytest:
    driver: local
  lgp-jupyter-data:
    driver: local
  lgp-docs-build:
    driver: local

networks:
  default:
    name: lgp-network
